#!/bin/bash
# UserData script to configure and run the load testing application.
# This script assumes that a /home/ec2-user/.env file has already been created.

# Load environment variables from the .env file into the current shell session.
if [ -f /home/ec2-user/.env ]; then
    echo "Found .env file. Loading environment variables..."
    source /home/ec2-user/.env
else
    echo "WARNING: /home/ec2-user/.env file not found. Using default values."
fi

# Update packages and install dependencies (Python 3 and pip).
# Using 'dnf' for Amazon Linux 2023, fallback to 'yum' for older versions.
if command -v dnf &> /dev/null; then
    dnf update -y
    dnf install -y python3 python3-pip
else
    yum update -y
    yum install -y python3 python3-pip
fi

# Install the Python 'requests' library, required to get the instance ID.
pip3 install requests

# Navigate to the user's home directory.
cd /home/ec2-user

# Create the Python application file using a "here document".
cat <<EOF > stress_app.py
# stress_app.py - Version with environment variable support
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs
import hashlib
import time
import requests
import os # Module to access environment variables

def burn_cpu(iterations):
    """Executes a hash calculation repeatedly to consume CPU."""
    s = b"a_string_to_hash_for_cpu_consumption"
    for _ in range(iterations):
        s = hashlib.sha256(s).digest()
    return s

def get_instance_id():
    """Fetches the instance ID from the EC2 metadata service."""
    try:
        response = requests.get('http://169.254.169.254/latest/meta-data/instance-id', timeout=0.5)
        return response.text
    except requests.exceptions.RequestException:
        return "N/A (not an EC2 instance or metadata is inaccessible)"

class SimpleWebServer(BaseHTTPRequestHandler):
    def do_GET(self):
        # --- UPDATED LOGIC TO DETERMINE ITERATIONS ---

        # 1. Set a default value from the environment variable.
        # If the variable doesn't exist, use 500,000 as a fallback.
        try:
            base_iterations = int(os.environ.get('CPU_STRESS_ITERATIONS', 500000))
        except ValueError:
            base_iterations = 500000 # In case the env var contains invalid text.

        # 2. Check if the URL provides a value to override the default.
        parsed_path = urlparse(self.path)
        query_params = parse_qs(parsed_path.query)
        try:
            # Use 'base_iterations' as the new default for the parameter lookup.
            iterations = int(query_params.get('iter', [base_iterations])[0])
            source = "URL parameter" if 'iter' in query_params else "Environment Variable"
        except (ValueError, TypeError):
            iterations = base_iterations # If the URL parameter is invalid.
            source = "Environment Variable (fallback)"

        # --- END OF UPDATED LOGIC ---

        start_time = time.time()
        burn_cpu(iterations)
        end_time = time.time()
        duration = end_time - start_time
        
        instance_id = get_instance_id()
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        
        message = f"""
        <html><head><title>CPU Load Test</title></head>
        <body>
            <h1>Request Processed!</h1>
            <p>This response was generated by instance: <b>{instance_id}</b></p>
            <p>The CPU task was executed with <b>{iterations:,}</b> iterations.</p>
            <p><i>(Value defined via: {source})</i></p>
            <p>Processing time: {duration:.4f} seconds.</p>
        </body></html>
        """
        self.wfile.write(bytes(message, "utf8"))

def run(server_class=HTTPServer, handler_class=SimpleWebServer, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f"Starting server on port {port}...")
    httpd.serve_forever()

if __name__ == "__main__":
    run()
EOF

# Set the correct owner for the application file.
chown ec2-user:ec2-user stress_app.py

# Run the Python server in the background using 'nohup'.
# This ensures it keeps running even if the shell session closes.
# The environment variables loaded by 'source' will be available to this process.
nohup python3 /home/ec2-user/stress_app.py > /var/log/stress_app.log 2>&1 &
